schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Subscription {
  addedPost: Post @aws_subscribe(mutations: ["createPost", "updatePost"])
  addedComment(parentId: ID!): Comment @aws_subscribe(mutations: ["createComment", "updateComment"])
  addedListType: ListType @aws_subscribe(mutations: ["createListType", "updateListType"])
  updatedListType(_id: ID!): ListType @aws_subscribe(mutations: ["updateListType"])
  addedListItem: ListItem @aws_subscribe(mutations: ["createListItem", "updateListItem"])
  updatedListItem(_id: ID!): ListItem @aws_subscribe(mutations: ["updateListItem"])
  addedField(parentId: ID!): Field @aws_subscribe(mutations: ["createField", "updateField"])
  addedFieldValue(parentId: ID!): FieldValue
    @aws_subscribe(mutations: ["createFieldValue", "updateFieldValue"])
  addedLike: Like @aws_subscribe(mutations: ["createLike"])
}

type Query {
  getUsers(
    page: Int
    limit: Int
    search: String
    lowerRange: AWSDateTime
    higherRange: AWSDateTime
    sortBy: String
    active: Boolean
  ): UserSearch @aws_cognito_user_pools(cognito_groups: ["superadmin"])
  getUser(_id: ID!): User @aws_api_key @aws_cognito_user_pools
  getUserByCognitoUserId(userId: String!): User
  getListTypes(page: Int, limit: Int, active: Boolean, search: String): ListTypes
  getListItems(page: Int, limit: Int, active: Boolean, search: String, types: [ID]): ListItems
  getListType(_id: ID!): ListType
  getListItem(_id: ID!): ListItem
  getListTypeBySlug(slug: String!): ListType @aws_api_key @aws_cognito_user_pools
  getListItemBySlug(slug: String!): ListItem @aws_api_key @aws_cognito_user_pools
  getPosts(page: Int, limit: Int, sortBy: String, search: String): Posts
   getListItemWithFieldsBySlug(slug: String!): ListItemWithFields
    @aws_api_key
    @aws_cognito_user_pools
  getMyPosts(page: Int, limit: Int, sortBy: String, search: String): Posts
  getPostsByUserId(userId: ID!, page: Int, limit: Int, sortBy: String, search: String): Posts
    @aws_api_key
    @aws_cognito_user_pools
  getPost(_id: ID!): Post
  getMyBookmarks(page: Int, limit: Int, sortBy: String, search: String): Bookmarks
  getBookmark(_id: ID!): Bookmark
  getFieldsByType(parentId: ID!, page: Int, sortBy: String, limit: Int, search: String): Fields
    @aws_api_key
    @aws_cognito_user_pools
  getFieldValuesByItem(
    parentId: ID!
    field: ID!
    page: Int
    limit: Int
    onlyShowByUser: Boolean
  ): FieldValues @aws_api_key @aws_cognito_user_pools
  getFieldValue(_id: ID!): FieldValue

  getComment(_id: ID!): Comment
  getCommentsByParentID(parentId: ID!, page: Int, limit: Int): Comments
  getLike(_id: ID!): Like
  getLikesByParentId(parentId: ID!, page: Int, limit: Int): Likes
  getActionCounts(parentId: ID!): actionCounts
}

type Mutation {
  createUser(userId: String!, name: String!, email: String!, picture: String): User
    @aws_cognito_user_pools(cognito_groups: ["superadmin"])
  updateUser(
    userId: String!
    updatedBy: String!
    name: String
    email: String
    picture: String
  ): User
  updateUserStatus(userId: String!, updatedBy: String!, status: Boolean!): User
    @aws_cognito_user_pools(cognito_groups: ["superadmin"])
  createListType(
    title: String!
    description: String
    media: [MediaInput]
    active: Boolean
  ): ListType
  createListItem(
    types: [ID!]
    title: String!
    description: String
    media: [MediaInput]
    active: Boolean
    layouts: AWSJSON
  ): ListItem
  updateListType(
    _id: ID!
    title: String
    description: String
    media: [MediaInput]
    active: Boolean
  ): ListType
  updateListItem(
    _id: ID!
    types: [ID]
    title: String
    description: String
    media: [MediaInput]
    active: Boolean
    layouts: AWSJSON
  ): ListItem
  updatePublish(_id: ID!, publish: Boolean): ListItem
  updateAuthentication(_id: ID!, authenticateUser: Boolean): ListItem
  deleteListItem(_id: ID!): Boolean
  deleteListType(_id: ID!): Boolean
  createPost(body: String!, media: [MediaInput]): Post
  updatePost(_id: ID!, body: String, media: [MediaInput]): Post
  deletePost(_id: ID!): Boolean
  createBookmark(parentId: String, bookmark: String!): Bookmark
  updateBookmark(_id: ID!, parentId: String, bookmark: String): Bookmark
  deleteBookmark(_id: ID!): Boolean
  createField(
    parentId: ID!
    label: String!
    fieldType: String!
    typeId: ID
    multipleValues: Boolean
    oneUserMultipleValues: Boolean
  ): Field
  updateField(
    _id: ID!
    label: String
    fieldType: String
    typeId: ID
    multipleValues: Boolean
    oneUserMultipleValues: Boolean
  ): Field
  updateFieldPosition(_id: ID!, position: Float!): Field
  deleteField(_id: ID!): Boolean
  createFieldValue(
    parentId: ID!
    field: ID!
    value: String
    valueDate: AWSDateTime
    valueNumber: Int
    valueBoolean: Boolean
    media: [MediaInput]
    itemId: ID
  ): FieldValue
  updateFieldValue(
    _id: ID!
    value: String
    valueDate: AWSDateTime
    valueNumber: Int
    valueBoolean: Boolean
    media: [MediaInput]
    itemId: ID
  ): FieldValue
  deleteFieldValue(_id: ID!): Boolean

  createComment(threadId: ID!, parentId: ID!, body: String!): Comment
  updateComment(_id: ID!, body: String): Comment
  deleteComment(_id: ID!): Boolean

  createLike(parentId: ID!): Like
  updateLike(_id: ID!): Like
  deleteLike(parentId: ID!): Boolean
}

type Bookmarks {
  data: [Bookmark]
  count: Int
}

type Bookmark {
  _id: ID
  parentId: String
  bookmark: String
  createdBy: ID
  updatedBy: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Comment {
  _id: ID
  body: String
  threadId: ID
  parentId: ID
  createdBy: User
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Like {
  _id: ID
  like: Boolean
  parentId: ID
  createdBy: User
  createdAt: AWSDateTime
}

type Comments {
  count: Int
  data: [Comment]
}

type Likes {
  count: Int
  data: [Like]
}

type Logo {
  _id: ID
  logo: String
  description: String
}

type actionCounts {
  commentCount: Int
  likeCount: Int
  likedByUser: Boolean
}
type Posts @aws_api_key @aws_cognito_user_pools {
  data: [Post]
  count: Int
}

type Tags @aws_api_key @aws_cognito_user_pools {
  tag: ListItem
}

type Post @aws_api_key @aws_cognito_user_pools {
  _id: ID
  body: String
  media: [Media]
  tags: [Tags]
  createdBy: User
  updatedBy: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Media @aws_api_key @aws_cognito_user_pools {
  url: String
  caption: String
}

input MediaInput {
  url: String
  caption: String
}

type UserSearch @aws_cognito_user_pools(cognito_groups: ["superadmin"]) {
  users: [User]
  count: Int
}

type User @aws_api_key @aws_cognito_user_pools {
  _id: ID!
  userId: String!
  name: String!
  email: String!
  picture: String
  active: Boolean!
  confirmed: Boolean!
  createdAt: String
  createdBy: String
  updatedAt: String
  updatedBy: String
}

type ListTypes {
  data: [ListType]
  count: Int
}

type ListType @aws_api_key @aws_cognito_user_pools {
  _id: ID
  title: String
  slug: String
  description: String
  media: [Media]
  active: Boolean
  inUse: Boolean
}

type Fields @aws_api_key @aws_cognito_user_pools {
  data: [Field]
  count: Int
}

type Field @aws_api_key @aws_cognito_user_pools {
  _id: ID
  parentId: ID
  position: Float
  label: String
  multipleValues: Boolean
  oneUserMultipleValues: Boolean
  fieldType: String
  typeId: ListType
  createdBy: User
  updatedBy: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}
type Field2 @aws_api_key @aws_cognito_user_pools {
  _id: ID
  parentId: ID
  position: Float
  label: String
  multipleValues: Boolean
  oneUserMultipleValues: Boolean
  fieldType: String
  typeId: ListType
  createdBy: User
  updatedBy: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  fieldValues: [FieldValue]
}

type FieldValues @aws_api_key @aws_cognito_user_pools {
  data: [FieldValue]
  count: Int
}

type FieldValue @aws_api_key @aws_cognito_user_pools {
  _id: ID
  parentId: ID
  field: ID
  value: String
  valueDate: AWSDateTime
  valueNumber: Int
  valueBoolean: Boolean
  media: [Media]
  itemId: ListItem
  createdBy: User
  updatedBy: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type ListItems {
  data: [ListItem]
  count: Int
}

type ListItem @aws_api_key @aws_cognito_user_pools {
  _id: ID
  title: String
  slug: String
  authenticateUser: Boolean
  description: String
  active: Boolean
  media: [Media]
  types: [ListType]
  layouts: AWSJSON
}
type ListItemWithFields @aws_api_key @aws_cognito_user_pools {
  listItem: ListItem
  fields: [Field2]
}
