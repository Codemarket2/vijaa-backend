schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Subscription {
  addedPost: Post @aws_subscribe(mutations: ["createPost"])
  updatedPost: Post @aws_subscribe(mutations: ["updatePost"])
}

type Query {
  getUsers(
    page: Int
    limit: Int
    search: String
    lowerRange: AWSDateTime
    higherRange: AWSDateTime
    sortBy: String
    active: Boolean
  ): UserSearch @aws_cognito_user_pools(cognito_groups: ["superadmin"])
  getUser(_id: ID!): User @aws_api_key @aws_cognito_user_pools
  getUserByCognitoUserId(userId: String!): User
  getUserProfile: User
  getListTypes(
    page: Int
    limit: Int
    active: Boolean
    search: String
  ): ListTypes
  getListItems(
    page: Int
    limit: Int
    active: Boolean
    search: String
    types: [ID]
  ): ListItems
  getListType(_id: ID!): ListType
  getListItem(_id: ID!): ListItem
  getListTypeBySlug(slug: String!): ListType
  getListItemBySlug(slug: String!): ListItem
  getPosts(page: Int, limit: Int, sortBy: String, search: String): Posts
  getMyPosts(page: Int, limit: Int, sortBy: String, search: String): Posts
  getPostsByUserId(
    userId: ID!
    page: Int
    limit: Int
    sortBy: String
    search: String
  ): Posts @aws_api_key @aws_cognito_user_pools
  getPost(_id: ID!): Post
  getMyBookmarks(
    page: Int
    limit: Int
    sortBy: String
    search: String
  ): Bookmarks
  getBookmark(_id: ID!): Bookmark
  getFieldsByType(parentId: ID!, page: Int, limit: Int, search: String): Fields
  getComment(_id: ID!): Comment
}

type Mutation {
  createUser(
    userId: String!
    name: String!
    email: String!
    picture: String
  ): User @aws_cognito_user_pools(cognito_groups: ["superadmin"])
  updateUser(
    userId: String!
    updatedBy: String!
    name: String
    email: String
    picture: String
  ): User

  updateUserProfile(field: String, itemId: String!): User
  updateUserStatus(userId: String!, updatedBy: String!, status: Boolean!): User
    @aws_cognito_user_pools(cognito_groups: ["superadmin"])
  createListType(
    title: String!
    description: String
    media: [MediaInput]
    active: Boolean
  ): ListType
  createListItem(
    types: [ID!]
    title: String!
    description: String
    media: [MediaInput]
    extra: [ExtraInput]
    active: Boolean
  ): ListItem
  updateListType(
    _id: ID!
    title: String
    description: String
    media: [MediaInput]
    active: Boolean
  ): ListType
  updateListItem(
    _id: ID!
    types: [ID]
    title: String
    description: String
    media: [MediaInput]
    extra: [ExtraInput]
    active: Boolean
  ): ListItem
  deleteListItem(_id: ID!): Boolean
  deleteListType(_id: ID!): Boolean
  createPost(body: String!, media: [MediaInput]): Post
  updatePost(_id: ID!, body: String, media: [MediaInput]): Post
  deletePost(_id: ID!): Boolean
  createBookmark(parentId: String, bookmark: String!): Bookmark
  updateBookmark(_id: ID!, parentId: String, bookmark: String): Bookmark
  deleteBookmark(_id: ID!): Boolean
  createField(
    parentId: ID!
    label: String!
    fieldType: String!
    typeId: ID
    multipleValues: Boolean
  ): Field
  updateField(
    _id: ID!
    label: String
    fieldType: String
    typeId: ID
    multipleValues: Boolean
  ): Field
  deleteField(_id: ID!): Boolean

  createComment(parentId: ID!, body: String!): Comment
  updateComment(_id: ID!, body: String): Comment
  deleteComment(_id: ID!): Boolean
}

type Bookmarks {
  data: [Bookmark]
  count: Int
}

type Bookmark {
  _id: ID
  parentId: String
  bookmark: String
  createdBy: ID
  updatedBy: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Posts @aws_api_key @aws_cognito_user_pools {
  data: [Post]
  count: Int
}

type Post @aws_api_key @aws_cognito_user_pools {
  _id: ID
  body: String
  media: [Media]
  createdBy: User
  updatedBy: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Comment {
  _id: ID
  body: String
  parentId: Post
  createdBy: User
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Comments {
  data: [Comment]
}

type Media @aws_api_key @aws_cognito_user_pools {
  url: String
  caption: String
}

input MediaInput {
  url: String
  caption: String
}

type UserSearch @aws_cognito_user_pools(cognito_groups: ["superadmin"]) {
  users: [User]
  count: Int
}

type User @aws_api_key @aws_cognito_user_pools {
  _id: ID!
  userId: String!
  name: String!
  email: String!
  picture: String
  active: Boolean!
  confirmed: Boolean!
  createdAt: String
  createdBy: String
  updatedAt: String
  updatedBy: String
  userProfile: UserProfile
}

type ListTypes {
  data: [ListType]
  count: Int
}

type ListType {
  _id: ID
  title: String
  slug: String
  description: String
  media: [Media]
  # fields: [TypeField]
  active: Boolean
  inUse: Boolean
}

type Fields {
  data: [Field]
  count: Int
}

type Field {
  _id: ID
  label: String
  multipleValues: Boolean
  fieldType: String
  typeId: ListType
  createdBy: User
  updatedBy: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type ListItems {
  data: [ListItem]
  count: Int
}

type ListItem {
  _id: ID
  title: String
  slug: String
  description: String
  active: Boolean
  extra: [Extra]
  media: [Media]
  types: [ListType]
}

type Extra {
  key: String
  value: String
}

input ExtraInput {
  key: String
  value: String
}

type UserProfile {
  cancerType: [ListItem]
  dateOfDiagnose: AWSDateTime
  doctors: [ListItem]
  symptoms: [ListItem]
}
