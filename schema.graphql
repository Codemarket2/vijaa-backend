schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Subscription {
  addedPost: Post @aws_subscribe(mutations: ["createPost", "updatePost"])
  addedComment(parentId: ID!): Comment @aws_subscribe(mutations: ["createComment", "updateComment"])
  addedLike: Like @aws_subscribe(mutations: ["createLike"])
}

type Query {
  getUsers(
    page: Int
    limit: Int
    search: String
    lowerRange: AWSDateTime
    higherRange: AWSDateTime
    sortBy: String
    active: Boolean
  ): UserSearch @aws_cognito_user_pools(cognito_groups: ["superadmin"])
  getUser(_id: ID!): User @aws_api_key @aws_cognito_user_pools
  getUserByCognitoUserId(userId: String!): User
  getPosts(page: Int, limit: Int, sortBy: String, search: String): Posts
  getMyPosts(page: Int, limit: Int, sortBy: String, search: String): Posts
  getPostsByUserId(userId: ID!, page: Int, limit: Int, sortBy: String, search: String): Posts
    @aws_api_key
    @aws_cognito_user_pools
  getPost(_id: ID!): Post
  getMyBookmarks(page: Int, limit: Int, sortBy: String, search: String): Bookmarks
  getBookmark(_id: ID!): Bookmark
  getComment(_id: ID!): Comment
  getCommentsByParentID(parentId: ID!, page: Int, limit: Int): Comments
  getLike(_id: ID!): Like
  getLikesByParentId(parentId: ID!, page: Int, limit: Int): Likes
  getActionCounts(parentId: ID!): actionCounts
}

type Mutation {
  createUser(userId: String!, name: String!, email: String!, picture: String): User
    @aws_cognito_user_pools(cognito_groups: ["superadmin"])
  updateUser(
    userId: String!
    updatedBy: String!
    name: String
    email: String
    picture: String
  ): User
  updateUserStatus(userId: String!, updatedBy: String!, status: Boolean!): User
    @aws_cognito_user_pools(cognito_groups: ["superadmin"])
  createPost(body: String!, media: [MediaInput]): Post
  updatePost(_id: ID!, body: String, media: [MediaInput]): Post
  deletePost(_id: ID!): Boolean
  createBookmark(parentId: String, bookmark: String!): Bookmark
  updateBookmark(_id: ID!, parentId: String, bookmark: String): Bookmark
  deleteBookmark(_id: ID!): Boolean
  createComment(threadId: ID!, parentId: ID!, body: String!): Comment
  updateComment(_id: ID!, body: String): Comment
  deleteComment(_id: ID!): Boolean
  createLike(parentId: ID!): Like
  updateLike(_id: ID!): Like
  deleteLike(parentId: ID!): Boolean
}

type Bookmarks {
  data: [Bookmark]
  count: Int
}

type Bookmark {
  _id: ID
  parentId: String
  bookmark: String
  createdBy: ID
  updatedBy: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Comment {
  _id: ID
  body: String
  threadId: ID
  parentId: ID
  createdBy: User
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Like {
  _id: ID
  like: Boolean
  parentId: ID
  createdBy: User
  createdAt: AWSDateTime
}

type Comments {
  count: Int
  data: [Comment]
}

type Likes {
  count: Int
  data: [Like]
}

type Logo {
  _id: ID
  logo: String
  description: String
}

type actionCounts {
  commentCount: Int
  likeCount: Int
  likedByUser: Boolean
}
type Posts @aws_api_key @aws_cognito_user_pools {
  data: [Post]
  count: Int
}

type Tags @aws_api_key @aws_cognito_user_pools {
  tag: ListItem
}

type Post @aws_api_key @aws_cognito_user_pools {
  _id: ID
  body: String
  media: [Media]
  tags: [Tags]
  createdBy: User
  updatedBy: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Media @aws_api_key @aws_cognito_user_pools {
  url: String
  caption: String
}

input MediaInput {
  url: String
  caption: String
}

type UserSearch @aws_cognito_user_pools(cognito_groups: ["superadmin"]) {
  users: [User]
  count: Int
}

type User @aws_api_key @aws_cognito_user_pools {
  _id: ID!
  userId: String!
  name: String!
  email: String!
  picture: String
  active: Boolean!
  confirmed: Boolean!
  createdAt: String
  createdBy: String
  updatedAt: String
  updatedBy: String
}
